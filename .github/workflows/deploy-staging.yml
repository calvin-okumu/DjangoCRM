name: üöÄ Deploy to Staging (Docker Compose via Twingate)

on:
  workflow_run:
    workflows: ["Smart CI/CD Pipeline"]
    types:
      - completed

jobs:
  detect-changes:
    name: Detect Code Changes for Staging
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Detect changed areas
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements.txt'
              - 'Dockerfile.backend'
              - '.github/workflows/ci-cd.yml'
            frontend:
              - 'frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/ci-cd.yml'

  deploy:
    name: Deploy to Staging
    needs: detect-changes
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'dev' &&
      (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true')
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # ---------------------------------------------
      # 1. Connect to Twingate Network
      # ---------------------------------------------
      - name: Connect to Twingate (Service Account)
        uses: twingate/github-action@v1
        with:
          service-key: ${{ secrets.TWINGATE_SERVICE_KEY }}

      # ---------------------------------------------
      # 2. Setup SSH Key (passwordless access)
      # ---------------------------------------------
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      # ---------------------------------------------
      # 3. Pre-Deploy Health Check
      # ---------------------------------------------
      - name: Pre-Deploy Health Check
        run: |
          if curl -f --max-time 10 ${{ secrets.STAGING_URL }}/health || curl -f --max-time 10 ${{ secrets.STAGING_URL }}; then
            echo "‚úÖ Staging is healthy"
          else
            echo "‚ö†Ô∏è Staging is not responding, proceeding with deploy"
          fi

      # ---------------------------------------------
      # 4. Deploy to Staging Server
      # ---------------------------------------------
      - name: Deploy to Staging Server
        env:
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          PROJECT_PATH: ${{ secrets.STAGING_PROJECT_PATH }}
          DB_CONTAINER: ${{ secrets.STAGING_DB_CONTAINER }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" bash -s <<EOF
          set -e  # Exit on any error
          
          # Navigate to project directory
          cd "$PROJECT_PATH" || { echo "‚ùå Failed to access project path"; exit 1; }
          
          echo "üìù Saving current commit for potential rollback..."
          CURRENT_COMMIT=\$(git rev-parse HEAD)
          echo "\$CURRENT_COMMIT" > .last-deployed-commit
          
          echo "üì¶ Pulling latest code..."
          git fetch origin || { echo "‚ùå Git fetch failed"; exit 1; }
          git reset --hard origin/dev || { echo "‚ùå Git reset failed"; exit 1; }
          
          echo "üíæ Backing up database..."
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          mkdir -p backups
          
          # Backup with error handling
          if ! docker exec -t "$DB_CONTAINER" pg_dumpall -c -U "$DB_USER" > "backups/db_backup_\${TIMESTAMP}.sql" 2>&1; then
            echo "‚ö†Ô∏è Database backup failed, but continuing deployment"
          else
            echo "‚úÖ Database backup saved to: backups/db_backup_\${TIMESTAMP}.sql"
          fi
          
          echo "üîÑ Pulling latest container images..."
          docker compose -f docker-compose.yml -f docker-compose.staging.yml pull || { echo "‚ùå Docker pull failed"; exit 1; }
          
          echo "üöÄ Starting containers..."
          docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d --remove-orphans || {
            echo "‚ùå Docker compose up failed"
            exit 1
          }
          
          echo "‚úÖ Staging deployment complete!"
          echo "üìä New commit: \$(git rev-parse HEAD)"
          EOF

      # ---------------------------------------------
      # 5. Post-Deploy Health Check & Rollback
      # ---------------------------------------------
      - name: Post-Deploy Health Check and Rollback
        if: always()
        env:
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          PROJECT_PATH: ${{ secrets.STAGING_PROJECT_PATH }}
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          echo "‚è≥ Waiting 30 seconds for services to start..."
          sleep 30
          
          echo "üè• Running post-deploy health check..."
          if curl -f --max-time 15 --retry 3 --retry-delay 5 "$STAGING_URL/health" || curl -f --max-time 15 --retry 3 "$STAGING_URL"; then
            echo "‚úÖ Post-deploy health check passed"
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Post-deploy health check failed - initiating rollback"
            
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" bash -s << 'ENDSSH'
            set -e
            cd "$PROJECT_PATH" || exit 1
            
            if [ -f .last-deployed-commit ]; then
              ROLLBACK_COMMIT=$(cat .last-deployed-commit)
              echo "üîÑ Rolling back to commit: $ROLLBACK_COMMIT"
              
              git checkout "$ROLLBACK_COMMIT" || {
                echo "‚ùå Rollback failed - manual intervention required"
                exit 1
              }
              
              echo "üîÑ Restarting containers with previous version..."
              docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d --remove-orphans
              
              echo "‚úÖ Rollback complete"
            else
              echo "‚ö†Ô∏è No previous commit found - cannot rollback automatically"
              echo "‚ö†Ô∏è Manual intervention required"
              exit 1
            fi
          ENDSSH
            
            echo "‚ùå Deployment failed and rolled back"
            exit 1
          fi

      # ---------------------------------------------
      # 6. Cleanup Old Backups (Optional)
      # ---------------------------------------------
      - name: Cleanup Old Backups
        if: success()
        env:
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          PROJECT_PATH: ${{ secrets.STAGING_PROJECT_PATH }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" bash -s <<EOF
          cd "$PROJECT_PATH/backups" 2>/dev/null || exit 0
          
          # Keep only last 10 backups
          ls -t db_backup_*.sql 2>/dev/null | tail -n +11 | xargs -r rm -f
          echo "üßπ Cleaned up old backups (keeping last 10)"
          EOF

      # ---------------------------------------------
      # 7. Deployment Summary
      # ---------------------------------------------
      - name: Deployment Summary
        if: success()
        run: |
          echo "## üéâ Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.event.workflow_run.head_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.event.workflow_run.head_branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Changes:**" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.detect-changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ secrets.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY

      # ---------------------------------------------
      # 8. Optional: Slack Notification
      # ---------------------------------------------
      # - name: Notify Slack
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      #     payload: |
      #       {
      #         "text": "Staging Deployment ${{ job.status }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*Staging Deployment ${{ job.status }}*\n*Commit:* `${{ github.event.workflow_run.head_sha }}`\n*Message:* ${{ github.event.workflow_run.head_commit.message }}"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
