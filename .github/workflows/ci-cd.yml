
name: Smart CI/CD Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect Code Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed areas
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements.txt'
              - 'Dockerfile.backend'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/ci.yml'

  backend:
    name: Backend Tests & Build
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_saascrm_db
          POSTGRES_USER: saascrm_user
          POSTGRES_PASSWORD: saascrm_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SECRET_KEY: ci-test-secret-key-not-for-production-use
      DEBUG: true
      ALLOWED_HOSTS: localhost,127.0.0.1,testserver
      SITE_URL: http://127.0.0.1:8000
      MULTI_TENANCY_ENABLED: false
      DB_NAME: test_saascrm_db
      DB_USER: saascrm_user
      DB_PASSWORD: saascrm_password
      DB_HOST: localhost
      DB_PORT: 5432
      DATABASE_URL: postgresql://saascrm_user:saascrm_password@localhost:5432/test_saascrm_db

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create environment file
        run: |
          cd backend
          cat > .env << EOF
          SECRET_KEY=${{ env.SECRET_KEY }}
          DEBUG=${{ env.DEBUG }}
          ALLOWED_HOSTS=${{ env.ALLOWED_HOSTS }}
          SITE_URL=${{ env.SITE_URL }}
          MULTI_TENANCY_ENABLED=${{ env.MULTI_TENANCY_ENABLED }}
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          DJANGO_ENV=${{ env.DJANGO_ENV }}
          EOF

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if PGPASSWORD=${{ env.DB_PASSWORD }} pg_isready -h localhost -p 5432 -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }} > /dev/null; then
              echo "✅ PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
          echo "❌ PostgreSQL did not become ready"
          exit 1

      - name: Run Django setup
        run: |
          cd backend
          python manage.py setup_project --skip-sample-data

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test --verbosity=2

      - name: Run API tests
        run: |
          cd backend
          python test_api.py

      - name: Build Backend Image (Dev)
        if: github.ref == 'refs/heads/dev'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: |
            carlhub-erp/backend:dev

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Backend Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/calvin-okumu/carlhub-erp/backend:latest
            ghcr.io/calvin-okumu/carlhub-erp/backend:${{ github.sha }}

  frontend:
    name: Frontend Tests & Build
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend setup
        run: |
          cd frontend
          node scripts/setup.js --ci

      - name: Run lint
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Frontend Image (Dev)
        if: github.ref == 'refs/heads/dev'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: |
            carlhub-erp/frontend:dev

      - name: Build & Push Frontend Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/calvin-okumu/carlhub-erp/frontend:latest
            ghcr.io/calvin-okumu/carlhub-erp/frontend:${{ github.sha }}

  create-tag:
    name: Create Git Tag for Release
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push tags

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="release-$(date +'%Y%m%d%H%M%S')"
          echo "Creating tag $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $TAG
          git push origin $TAG
