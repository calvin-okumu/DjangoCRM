
# .github/workflows/deploy-production.yml


name: üöÄ Deploy to Production (Blue-Green + Rollback)

on:
  workflow_run:
    workflows: ["Smart CI/CD Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Production
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-domain.com

    steps:
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy Blue-Green
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            set -e

            cd ${{ secrets.PRODUCTION_PROJECT_PATH }}

            echo "üîç Detecting active color..."
            if [ -f active_color ]; then
              ACTIVE_COLOR=$(cat active_color)
            else
              ACTIVE_COLOR=green  # fallback default
            fi

            echo "üåÄ Active color is: \$ACTIVE_COLOR"

            if [ "\$ACTIVE_COLOR" = "blue" ]; then
              TARGET_COLOR=green
            else
              TARGET_COLOR=blue
            fi

            echo "üöÄ Deploying to: \$TARGET_COLOR"

            echo "üì¶ Fetching latest code..."
            git fetch origin
            git reset --hard origin/main

            echo "üíæ Backing up database..."
            TIMESTAMP=\$(date +%Y%m%d%H%M%S)
            mkdir -p backups
            docker exec -t ${{ secrets.PRODUCTION_DB_CONTAINER }} pg_dumpall -c -U ${{ secrets.PRODUCTION_DB_USER }} > backups/db_backup_\$TIMESTAMP.sql

            echo "üí° Saving current state..."
            echo "\$ACTIVE_COLOR" > previous_color
            echo "\$(git rev-parse HEAD)" > previous_commit

            echo "üîÑ Spinning up new version (\$TARGET_COLOR)..."
            docker-compose -f docker-compose.yml -f docker-compose.\$TARGET_COLOR.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.\$TARGET_COLOR.yml up -d --build --remove-orphans

            echo "üíæ Saving deployed commit and color"
            echo "\$TARGET_COLOR" > active_color
            echo "\$(git rev-parse HEAD)" > deployed_commit

            echo "‚úÖ New version deployed to \$TARGET_COLOR (not live yet)"

            echo "üéöÔ∏è Switching traffic to \$TARGET_COLOR..."
            ./scripts/switch_proxy.sh \$TARGET_COLOR

            echo "‚úÖ Traffic switched to \$TARGET_COLOR"
          EOF

      - name: Post-Deploy Health Check and Rollback
        if: always()
        run: |
          echo "‚è≥ Waiting before health check..."
          sleep 30

          echo "üîç Checking health of deployed version..."
          if curl -f --max-time 10 ${{ secrets.PRODUCTION_URL }}/health || curl -f --max-time 10 ${{ secrets.PRODUCTION_URL }}; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed ‚Äî rolling back!"
            ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
              set -e
              cd ${{ secrets.PRODUCTION_PROJECT_PATH }}

              echo "üîô Rolling back to previous color and commit..."
              ROLLBACK_COLOR=\$(cat previous_color)
              ROLLBACK_COMMIT=\$(cat previous_commit)

              git reset --hard \$ROLLBACK_COMMIT
              ./scripts/switch_proxy.sh \$ROLLBACK_COLOR
              echo "\$ROLLBACK_COLOR" > active_color
              echo "\$ROLLBACK_COMMIT" > deployed_commit

              echo "‚ôªÔ∏è Restarting old containers..."
              docker-compose -f docker-compose.yml -f docker-compose.\$ROLLBACK_COLOR.yml up -d --remove-orphans

              echo "‚úÖ Rollback complete. Traffic back to \$ROLLBACK_COLOR."
            EOF
            exit 1
          fi

