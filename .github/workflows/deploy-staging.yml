
name: üöÄ Deploy to Staging (Docker Compose via Twingate)

on:
  workflow_run:
    workflows: ["Smart CI/CD Pipeline"]
    types:
      - completed

jobs:
  detect-changes:
    name: Detect Code Changes for Staging
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Detect changed areas
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements.txt'
              - 'Dockerfile.backend'
              - '.github/workflows/ci-cd.yml'
            frontend:
              - 'frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/ci-cd.yml'

  deploy:
    name: Deploy to Staging
    needs: detect-changes
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'dev' &&
      (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true')
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # ---------------------------------------------
      # 1. Connect to Twingate Network
      # ---------------------------------------------
      - name: Connect to Twingate (Service Account)
        uses: twingate/github-action@v1
        with:
          network: ${{ secrets.TWINGATE_NETWORK }}
          serviceAccountId: ${{ secrets.TWINGATE_SERVICE_ACCOUNT_ID }}
          keyId: ${{ secrets.TWINGATE_KEY_ID }}
          privateKey: ${{ secrets.TWINGATE_PRIVATE_KEY }}

      # ---------------------------------------------
      # 2. Pre-Deploy Health Check (over Twingate)
      # ---------------------------------------------
      - name: Pre-Deploy Health Check
        run: |
          if curl -f --max-time 10 ${{ secrets.STAGING_URL }}/health || curl -f --max-time 10 ${{ secrets.STAGING_URL }}; then
            echo "‚úÖ Staging is healthy"
          else
            echo "‚ö†Ô∏è Staging is not responding, proceeding with deploy"
          fi

      # ---------------------------------------------
      # 3. Deploy to Staging Server (over Twingate)
      # ---------------------------------------------
      - name: Deploy to Staging Server
        env:
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
            set -e
            echo "üì¶ Pulling latest code..."
            cd ${{ secrets.STAGING_PROJECT_PATH }}
            CURRENT_COMMIT=$(git rev-parse HEAD)
            git fetch origin
            git reset --hard origin/dev

            echo "üíæ Backing up database..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            mkdir -p backups
            docker exec -t ${{ secrets.STAGING_DB_CONTAINER }} pg_dumpall -c -U ${{ secrets.STAGING_DB_USER }} > backups/db_backup_$TIMESTAMP.sql

            echo "üîÑ Updating containers with staging compose files..."
            docker compose -f docker-compose.yml -f docker-compose.staging.yml pull
            docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d --remove-orphans

            echo "‚úÖ Staging deployment complete!"
            echo "$CURRENT_COMMIT" > .last-deployed-commit
          EOF

      # ---------------------------------------------
      # 4. Post-Deploy Health Check & Rollback
      # ---------------------------------------------
      - name: Post-Deploy Health Check and Rollback
        if: always()
        run: |
          sleep 30
          if curl -f --max-time 10 ${{ secrets.STAGING_URL }}/health || curl -f --max-time 10 ${{ secrets.STAGING_URL }}; then
            echo "‚úÖ Post-deploy health check passed"
          else
            echo "‚ùå Post-deploy health check failed, rolling back"
            ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
              cd ${{ secrets.STAGING_PROJECT_PATH }}
              if [ -f .last-deployed-commit ]; then
                git checkout "$(cat .last-deployed-commit)"
              else
                echo "‚ö†Ô∏è No previous commit to rollback to!"
              fi
              docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d --remove-orphans
            EOF
            exit 1
          fi

      # ---------------------------------------------
      # 5. Optional: Slack Notification
      # ---------------------------------------------
      # - name: Notify Slack
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      #     slack-message: "Staging deployment ${{ job.status }} for commit ${{ github.sha }}: ${{ github.event.workflow_run.head_commit.message || 'No message' }}"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

