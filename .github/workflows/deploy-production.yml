
# .github/workflows/deploy-production.yml

name: üöÄ Deploy to Production (Blue-Green + Rollback)

on:
  workflow_run:
    workflows: ["Smart CI/CD Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Production
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-domain.com

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # ---------------------------------------------
      # 1. Setup Twingate CLI and Connect
      # ---------------------------------------------
      - name: Install Twingate CLI
        run: |
          curl -fsSL https://binaries.twingate.com/client/linux/install.sh | sh

      - name: Connect to Twingate
        env:
          TWINGATE_ACCESS_TOKEN: ${{ secrets.TWINGATE_ACCESS_TOKEN }}
          TWINGATE_REFRESH_TOKEN: ${{ secrets.TWINGATE_REFRESH_TOKEN }}
          TWINGATE_NETWORK: ${{ secrets.TWINGATE_NETWORK }}
        run: |
          ./twingate setup --headless \
            --network $TWINGATE_NETWORK \
            --access-token $TWINGATE_ACCESS_TOKEN \
            --refresh-token $TWINGATE_REFRESH_TOKEN

          ./twingate start
          sleep 5  # allow time for connection

      # ---------------------------------------------
      # 2. Run Remote Deployment Commands over Twingate
      # ---------------------------------------------
      - name: Run Blue-Green Deployment via Remote Shell (over Twingate)
        env:
          PROD_HOST: ${{ secrets.PRODUCTION_HOST }}
          PROD_USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
            set -e
            cd ${{ secrets.PRODUCTION_PROJECT_PATH }}

            echo "üîç Detecting active color..."
            if [ -f active_color ]; then
              ACTIVE_COLOR=$(cat active_color)
            else
              ACTIVE_COLOR=green
            fi

            if [ "$ACTIVE_COLOR" = "blue" ]; then
              TARGET_COLOR=green
            else
              TARGET_COLOR=blue
            fi

            echo "üì¶ Pulling latest code..."
            git fetch origin
            git reset --hard origin/main

            echo "üíæ Backing up DB..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            mkdir -p backups
            docker exec -t ${{ secrets.PRODUCTION_DB_CONTAINER }} pg_dumpall -c -U ${{ secrets.PRODUCTION_DB_USER }} > backups/db_backup_$TIMESTAMP.sql

            echo "$ACTIVE_COLOR" > previous_color
            echo "$(git rev-parse HEAD)" > previous_commit

            echo "üîÑ Deploying to $TARGET_COLOR..."
            docker-compose -f docker-compose.yml -f docker-compose.$TARGET_COLOR.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.$TARGET_COLOR.yml up -d --build --remove-orphans

            echo "$TARGET_COLOR" > active_color
            echo "$(git rev-parse HEAD)" > deployed_commit

            echo "üéöÔ∏è Switching traffic to $TARGET_COLOR..."
            ./scripts/switch_proxy.sh $TARGET_COLOR

            echo "‚úÖ Deployment to $TARGET_COLOR complete"
          EOF

      # ---------------------------------------------
      # 3. Health Check & Rollback
      # ---------------------------------------------
      - name: Post-Deploy Health Check & Rollback
        if: always()
        run: |
          echo "‚è≥ Waiting for service to stabilize..."
          sleep 30

          if curl -f --max-time 10 ${{ secrets.PRODUCTION_URL }}/health || curl -f --max-time 10 ${{ secrets.PRODUCTION_URL }}; then
            echo "‚úÖ Health check passed."
          else
            echo "‚ùå Health check failed ‚Äî Rolling back..."
            ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
              set -e
              cd ${{ secrets.PRODUCTION_PROJECT_PATH }}

              ROLLBACK_COLOR=$(cat previous_color)
              ROLLBACK_COMMIT=$(cat previous_commit)

              git reset --hard $ROLLBACK_COMMIT
              ./scripts/switch_proxy.sh $ROLLBACK_COLOR
              echo "$ROLLBACK_COLOR" > active_color
              echo "$ROLLBACK_COMMIT" > deployed_commit

              docker-compose -f docker-compose.yml -f docker-compose.$ROLLBACK_COLOR.yml up -d --remove-orphans

              echo "‚úÖ Rolled back to $ROLLBACK_COLOR"
            EOF
            exit 1
          fi


