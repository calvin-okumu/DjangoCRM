name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/automated-setup ]
  pull_request:
    branches: [ main, develop ]

env:
  DJANGO_ENV: ci

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_saascrm_db
          POSTGRES_USER: saascrm_user
          POSTGRES_PASSWORD: saascrm_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create CI environment file
      run: |
        cd backend
        cat > .env << EOF
        SECRET_KEY=ci-test-secret-key-not-for-production-use
        DEBUG=True
        ALLOWED_HOSTS=localhost,127.0.0.1,testserver
        SITE_URL=http://127.0.0.1:8000
        MULTI_TENANCY_ENABLED=False
        DB_NAME=test_saascrm_db
        DB_USER=saascrm_user
        DB_PASSWORD=saascrm_password
        DB_HOST=localhost
        DB_PORT=5432
        DJANGO_ENV=ci
        EOF

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=saascrm_password pg_isready -h localhost -p 5432 -U saascrm_user -d test_saascrm_db >/dev/null 2>&1; then
            echo "✅ PostgreSQL is ready!"
            exit 0
          fi
          echo "PostgreSQL not ready, attempt $i/30, waiting..."
          sleep 2
        done
        echo "❌ PostgreSQL failed to start after 30 attempts (60 seconds)"
        echo "Checking if PostgreSQL service is running..."
        docker ps | grep postgres || echo "PostgreSQL container not found"
        exit 1

    - name: Run automated setup
      run: |
        cd backend
        python manage.py setup_project --skip-sample-data
      env:
        SECRET_KEY: ci-test-secret-key-not-for-production-use
        DEBUG: true
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
        SITE_URL: http://127.0.0.1:8000
        MULTI_TENANCY_ENABLED: false
        DATABASE_URL: postgresql://saascrm_user:saascrm_password@localhost:5432/test_saascrm_db
        DJANGO_ENV: ci

    - name: Run tests
      run: |
        cd backend
        python manage.py test --verbosity=2

    - name: Run API tests
      run: |
        cd backend
        python test_api.py

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/saascrm-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/saascrm-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/saascrm-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/saascrm-frontend:${{ github.sha }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [test, build-and-push]

    steps:
    - name: Cleanup
      run: |
        echo "Pipeline completed with status: ${{ job.status }}"
        # Add cleanup commands if needed